create table student (
    student_id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    middle_name TEXT,
    group_number INT NOT NULL DEFAULT 1,
    unique (first_name, last_name, middle_name)
);

create table subject (
    subject_id int primary key generated always as identity,
    subject_name text not null unique
);

create table teacher (
    teacher_id int primary key generated always as identity,
    first_name text not null,
    last_name text not null,
    middle_name text,
    unique (first_name, last_name, middle_name)
);

create table teacher_subject (
    id int primary key generated always as identity,
    teacher_id int references teacher(teacher_id),
    subject_id int references subject(subject_id),
    unique (teacher_id, subject_id)
);

create table pair_time (
    id int primary key generated always as identity,
    start_time time not null unique,
    end_time time not null unique
);

create table schedule (
    schedule_id int primary key generated always as identity,
    subject_id int references subject (subject_id),
    teacher_id int references teacher (teacher_id),
    day_of_week int not null check (day_of_week between 1 and 6),
    pair_number int not null check (pair_number between 1 and 6)
        references pair_time(id),
    unique (group_id, subject_id, teacher_id, day_of_week, pair_number)
);

create table lesson_instance (
    lesson_id int primary key generated always as identity,
    schedule_id int references schedule(schedule_id) on delete cascade,
    lesson_date date not null,
    unique (schedule_id, lesson_date)
);

create table grades_semester (
    grade_id int primary key generated always as identity,
    student_id int references student(student_id),
    lesson_id int references lesson_instance(lesson_id),
    grade int,
    date_assigned date not null,
    unique (student_id, lesson_id)
);

create table users (
    user_id int primary key generated always as identity,
    login text not null unique,
    password text not null,
    role int check (role >= 1 and role <= 3)
);

create table student_user (
    id int primary key generated always as identity,
    user_id int unique references users(user_id) on delete cascade,
    student_id int references student(student_id) on delete cascade
);

create table teacher_user (
    id int primary key generated always as identity,
    user_id int unique references users(user_id) on delete cascade,
    teacher_id int unique references teacher(teacher_id) on delete cascade
);

insert into users(login, password, role)
values ('admin', 'admin', 1);
